// download.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: 01.simple/proto/rpc/download.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Download_Download_FullMethodName = "/rpc.Download/Download"
)

// DownloadClient is the client API for Download service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 下载服务
// 请求接受一个DownloadReq
// 响应回发多条数据（"true" or "false")
type DownloadClient interface {
	Download(ctx context.Context, in *DownloadReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadRes], error)
}

type downloadClient struct {
	cc grpc.ClientConnInterface
}

func NewDownloadClient(cc grpc.ClientConnInterface) DownloadClient {
	return &downloadClient{cc}
}

func (c *downloadClient) Download(ctx context.Context, in *DownloadReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Download_ServiceDesc.Streams[0], Download_Download_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadReq, DownloadRes]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Download_DownloadClient = grpc.ServerStreamingClient[DownloadRes]

// DownloadServer is the server API for Download service.
// All implementations must embed UnimplementedDownloadServer
// for forward compatibility.
//
// 下载服务
// 请求接受一个DownloadReq
// 响应回发多条数据（"true" or "false")
type DownloadServer interface {
	Download(*DownloadReq, grpc.ServerStreamingServer[DownloadRes]) error
	mustEmbedUnimplementedDownloadServer()
}

// UnimplementedDownloadServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDownloadServer struct{}

func (UnimplementedDownloadServer) Download(*DownloadReq, grpc.ServerStreamingServer[DownloadRes]) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedDownloadServer) mustEmbedUnimplementedDownloadServer() {}
func (UnimplementedDownloadServer) testEmbeddedByValue()                  {}

// UnsafeDownloadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DownloadServer will
// result in compilation errors.
type UnsafeDownloadServer interface {
	mustEmbedUnimplementedDownloadServer()
}

func RegisterDownloadServer(s grpc.ServiceRegistrar, srv DownloadServer) {
	// If the following call pancis, it indicates UnimplementedDownloadServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Download_ServiceDesc, srv)
}

func _Download_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DownloadServer).Download(m, &grpc.GenericServerStream[DownloadReq, DownloadRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Download_DownloadServer = grpc.ServerStreamingServer[DownloadRes]

// Download_ServiceDesc is the grpc.ServiceDesc for Download service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Download_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Download",
	HandlerType: (*DownloadServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Download",
			Handler:       _Download_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "01.simple/proto/rpc/download.proto",
}
